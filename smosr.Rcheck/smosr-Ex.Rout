
R version 4.3.1 (2023-06-16 ucrt) -- "Beagle Scouts"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "smosr"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> base::assign(".ExTimings", "smosr-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('smosr')
The legacy packages maptools, rgdal, and rgeos, underpinning the sp package,
which was just loaded, will retire in October 2023.
Please refer to R-spatial evolution reports for details, especially
https://r-spatial.org/r/2023/05/15/evolution4.html.
It may be desirable to make the sf package available;
package maintainers should consider adding sf to Suggests:.
The sp package is now running under evolution status 2
     (status 2 uses the sf package in place of rgdal)
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("download_smos")
> ### * download_smos
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: download_smos
> ### Title: Download BEC-SMOS soil moisture data
> ### Aliases: download_smos
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # to download all files found with find_smos()
> ##D # into the current working directory
> ##D start_date <- as.Date("2022-01-01")
> ##D end_date <- as.Date("2022-12-31")
> ##D date_range <- seq(start_date, end_date, by = 30)
> ##D smos_data <- find_smos(freq = 3, orbit = "descending", dates = date_range)
> ##D download_smos(smos_data)
> ##D # to download first five items from the complete list of files
> ##D # and place them in a newly created directory
> ##D dir.create("~/SMOS_data")
> ##D download_smos(data = smos_data[1:5], dir = "~/SMOS_data")
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("download_smos", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("extract_smos")
> ### * extract_smos
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: extract_smos
> ### Title: Extract BEC-SMOS soil moisture estimates for specific
> ###   geographical locations
> ### Aliases: extract_smos
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # to iterate over BEC-SMOS data files stored in the current working directory
> ##D # and extract soil moisture estimates for the specified geographical locations
> ##D smos_data <- list_smos()
> ##D lat <- c(40.42, 41.90, 48.86, 52.50, 59.91)
> ##D lon <- c(-3.70, 12.50, 2.35, 13.40, 10.75)
> ##D sm_estimates <- extract_smos(data = smos_data, lat = lat, lon = lon)
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("extract_smos", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("find_smos")
> ### * find_smos
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: find_smos
> ### Title: Find BEC-SMOS soil moisture data in Barcelona Expert Center
> ###   (BEC) server
> ### Aliases: find_smos
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # to look for SMOS data on a specific date
> ##D smos_data <- find_smos(freq = 1, orbit = "a", dates = "2022-12-31")
> ##D # to search over a date range
> ##D start_date <- as.Date("2022-01-01")
> ##D end_date <- as.Date("2022-12-31")
> ##D date_range <- seq(start_date, end_date, by = 10)
> ##D smos_data <- find_smos(freq = 3, orbit = "descending", dates = date_range)
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("find_smos", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("list_smos")
> ### * list_smos
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: list_smos
> ### Title: List the BEC-SMOS data files stored on a local computer
> ### Aliases: list_smos
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # to list all BEC-SMOS data files stored in the current working directory
> ##D # as well as in the corresponding subfolders
> ##D smos_data <- list_smos(recursive = TRUE)
> ##D # to list BEC-SMOS data files with the specified frequency and SMOS orbit
> ##D # stored in the specified folder
> ##D smos_data <- list_smos(freq = 3, orbit = "asc", dir = "~/SMOS_data")
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("list_smos", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("missing_smos")
> ### * missing_smos
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: missing_smos
> ### Title: Print the dates for which BEC-SMOS soil moisture data have not
> ###   been found
> ### Aliases: missing_smos
> 
> ### ** Examples
> 
> ## Not run: 
> ##D missing_smos()
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("missing_smos", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot_raster_smos")
> ### * plot_raster_smos
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot_raster_smos
> ### Title: Draw a raster image of BEC-SMOS soil moisture data
> ### Aliases: plot_raster_smos
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # to draw a raster image of soil moisture data within specified bounds
> ##D smos_data <- list_smos()
> ##D lat <- c(35.00, 45.00)
> ##D lon <- c(-10.50, 4.50)
> ##D plot_raster_smos(data = smos_data[1], lat = lat, lon = lon)
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot_raster_smos", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot_temporal_smos")
> ### * plot_temporal_smos
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot_temporal_smos
> ### Title: Plot temporal series of BEC-SMOS soil moisture data
> ### Aliases: plot_temporal_smos
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # to plot extracted temporal series of soil moisture data
> ##D # with the specified frequency, SMOS orbit and QA
> ##D smos_data <- list_smos()
> ##D lat <- c(40.42, 41.90, 48.86, 52.50, 59.91)
> ##D lon <- c(-3.70, 12.50, 2.35, 13.40, 10.75)
> ##D sm_estimates <- extract_smos(data = smos_data, lat = lat, lon = lon)
> ##D plot_temporal_smos(data = sm_estimates, freq = 3, orbit = "d", QA = 0)
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot_temporal_smos", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("set_credentials")
> ### * set_credentials
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: set_credentials
> ### Title: Set credentials to access Barcelona Expert Center (BEC) server
> ### Aliases: set_credentials
> 
> ### ** Examples
> 
> ## Not run: 
> ##D set_credentials("username", "password")
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("set_credentials", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  8.15 0.99 10.09 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
